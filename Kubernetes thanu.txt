ls 
mkdir kubernetes
cd kubernetes
vi dev.yaml
kubectl apply -f dev.yaml
kubectl get deployments.apps
kubectl get pod
kubectl describe deployments.app ngnix deployments |more
kubectl scale deployment ngnix-deployment --replicas=10
kubectl get pod
kubectl edit deployments.app
kubectl edit deployments.apps ngnix-deployment
change pod to2
kubectl get pod -o wide
kubectl delete pod
sudo apt-get update
sudo apt-get install docker.io -y
sudo systemctl enable --now docker
sudo swapoff -a
sudo apt-get install -y apt-transport-https ca-certificates curl gpg
sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo systemctl enable --now kubelet
sudo apt-get update
sudo apt-get install docker.io -y
sudo systemctl enable --now docker
sudo swapoff -a
sudo apt-get install -y apt-transport-https ca-certificates curl gpg
sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo systemctl enable --now kubelet







apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.16.1
        ports:
        - containerPort: 80

Assigment 1
https://github.com/visaltyagi/Kubernetes-Assignment-1?source=post_page-----6643342cc998---------------------------------------




https://github.com/discover-devops/kubernetes_workshop/tree/main





sudo modprobe br_netfilter
   15  lsmod | grep br_netfilter
   16  echo 'net.bridge.bridge-nf-call-iptables=1' | sudo tee /etc/sysctl.d/k8s.conf
   17  sudo sysctl --system
   18  sudo kubeadm init
   19  history

 Fix Steps
Run these commands to fix the issue:

Load the required kernel module:

bash
Copy
Edit
sudo modprobe br_netfilter
Verify the module is loaded:

bash
Copy
Edit
lsmod | grep br_netfilter
You should see output indicating it's loaded. If nothing is shown, the module didn't load.

Set the required sysctl parameters:

bash
Copy
Edit
echo 'net.bridge.bridge-nf-call-iptables=1' | sudo tee /etc/sysctl.d/k8s.conf
sudo sysctl --system
Retry the kubeadm init:

bash
Copy
Edit
sudo kubeadm init
ðŸ›  Optional: Persist the Module Across Reboots
To ensure the module loads at boot:

bash
Copy
Edit
echo 'br_netfilter' | sudo tee /etc/modules-load.d/k8s.conf
Let me know if you're running inside a container or minimal environment (like a stripped-down EC2 image), as some of these files may not exist unless you explicitly enable them.











