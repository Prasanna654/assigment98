ls 
mkdir kubernetes
cd kubernetes
vi dev.yaml
kubectl apply -f dev.yaml
kubectl get deployments.apps
kubectl get pod
kubectl describe deployments.app ngnix deployments |more
kubectl scale deployment ngnix-deployment --replicas=10
kubectl get pod
kubectl edit deployments.app
kubectl edit deployments.apps ngnix-deployment
change pod to2
kubectl get pod -o wide
kubectl delete pod
sudo apt-get update
sudo apt-get install docker.io -y
sudo systemctl enable --now docker
sudo swapoff -a
sudo apt-get install -y apt-transport-https ca-certificates curl gpg
sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo systemctl enable --now kubelet
sudo apt-get update
sudo apt-get install docker.io -y
sudo systemctl enable --now docker
sudo swapoff -a
sudo apt-get install -y apt-transport-https ca-certificates curl gpg
sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo systemctl enable --now kubelet







apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.16.1
        ports:
        - containerPort: 80

Assigment 1
https://github.com/visaltyagi/Kubernetes-Assignment-1?source=post_page-----6643342cc998---------------------------------------




https://github.com/discover-devops/kubernetes_workshop/tree/main





sudo modprobe br_netfilter
   15  lsmod | grep br_netfilter
   16  echo 'net.bridge.bridge-nf-call-iptables=1' | sudo tee /etc/sysctl.d/k8s.conf
   17  sudo sysctl --system
   18  sudo kubeadm init
   19  history

 Fix Steps
Run these commands to fix the issue:

Load the required kernel module:

bash
Copy
Edit
sudo modprobe br_netfilter
Verify the module is loaded:

bash
Copy
Edit
lsmod | grep br_netfilter
You should see output indicating it's loaded. If nothing is shown, the module didn't load.

Set the required sysctl parameters:

bash
Copy
Edit
echo 'net.bridge.bridge-nf-call-iptables=1' | sudo tee /etc/sysctl.d/k8s.conf
sudo sysctl --system
Retry the kubeadm init:

bash
Copy
Edit
sudo kubeadm init
ðŸ›  Optional: Persist the Module Across Reboots
To ensure the module loads at boot:

bash
Copy
Edit
echo 'br_netfilter' | sudo tee /etc/modules-load.d/k8s.conf
Let me know if you're running inside a container or minimal environment (like a stripped-down EC2 image), as some of these files may not exist unless you explicitly enable them.






sudo apt-get updatesudo apt-get install docker.io -ysudo systemctl enable --now dockersudo swapoff -asudo apt-get install -y apt-transport-https ca-certificates curl gpgsudo mkdir -p -m 755 /etc/apt/keyringscurl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpgecho 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.listsudo apt-get updatesudo apt-get install -y kubelet kubeadm kubectlsudo systemctl enable --now kubelet




   1  sudo apt update
    2  sudo install.sh
    3  sudo nano install.sh
    4  bash install.sh
    5  sudo kubeadm init
    6  sudo modprobe br_netfilter
    7  sudo modprobe overlay
    8  echo -e "br_netfilter\noverlay" | sudo tee /etc/modules-load.d/k8s.conf
    9  cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

   10  sudo sysctl --system
   11  sudo kubeadm init
   12  mkdir -p $HOME/.kube
   13  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
   14  sudo chown $(id -u):$(id -g) $HOME/.kube/config
   15  ls /proc/sys/net/bridge/
   16  sudo chown $(id -u):$(id -g) $HOME/.kube/config





 1  minikube start --driver=docker
    2  sudo kubeadm init
    3  sudo snap install kubeadm
    4  kubectl get nodes
    5  ls 
    6  mkdir kubernetes
    7  cd kubernetes
    8  sudo nano install.yaml
    9  kubectl apply -f dev.yaml
   10  kubectl apply -f install.yaml
   11  kubectl get deployments.apps
   12  kubectl get pod
   13  kubectl describe deployments.app ngnix deployments |more
   14  nano service.yaml
   15  kubectl apply â€“f service.yaml
   16  kubectl apply -f service.yaml
   17  kubectl get svc
   18  nano deployment.yaml
   19  y
   20  nano deployment.yaml
   21  kubectl apply -f deployment.yaml
   22  kubectl get deploy
   23  kubectl get po
   24  nano deployment1.yaml
   25  kubectl apply -f deployment.yaml
   26  kubectl edit service my-app-service
   27  kubectl get services
   28  kubectl get services
   29  service.yaml
   30  nano service.yaml
   31  kubectl apply -f service.yaml
   32  kubectl get services
   33  history










